from ADJ import *
from Analytical_2D import *
from Plotting import *


def get_analytical_adj_state(xs, ys, M, N):
    list_adj_state = []
    for j in range(Nrow):
        for i in range(Ncol):
            x = gwf.modelgrid.xcellcenters[j][i]
            y = gwf.modelgrid.ycellcenters[j][i]
            list_adj_state.append(phi_s(x, y, xs, ys, M, N))
    array_adj_state = np.array(list_adj_state)
    array_adj_state_2D = np.reshape(array_adj_state, (Nrow, Ncol))
    return array_adj_state_2D

def get_analytical_adj_state_averaged_head(C, M, N):
    list_adj_state = []
    for j in range(Nrow):
        for i in range(Ncol):
            x = gwf.modelgrid.xcellcenters[j][i]
            y = gwf.modelgrid.ycellcenters[j][i]
            list_adj_state.append(phi_s_Averaged_Head(x, y, C, M, N))
    array_adj_state = np.array(list_adj_state)
    array_adj_state_2D = np.reshape(array_adj_state, (Nrow, Ncol))
    return array_adj_state_2D


#-------------------------------------------Adjoint System--------------------------------------------------------------
list_AS = SolveAdjointAveragedHead(len(IA)-1)
lam_anal = get_analytical_adj_state_averaged_head(1.0, 50, 50)
#-----------------------------------------------------------------------------------------------------------------------
 # ## Post-Process Head Results
lam = list_AS
# lam = np.array(lam)
lam_3d = np.reshape(lam, (Nlay, Nrow, Ncol))
print('lam = ',  lam_3d[0])
x = np.linspace(0, L1, Ncol)
y = np.linspace(0, L2, Nrow)
y = y[::-1]
vmin, vmax = min(lam), max(lam)
# vmin, vmax = lam_anal.min(), lam_anal.max()
# contour_intervals = np.arange(vmin, vmax, 10)
# contour_intervals = np.array([-1.0e-3, -3.0e-4, -2.0e-4, -1.0e-4, -5.0e-5, -1.0e-5, -5.0e-6, -1.0e-6, -1.0e-7, -1.0e-8, -1.0e-9])
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(1, 1, 1, aspect="equal")
c1 = ax.contour(x, y, lam_anal, colors="black", linestyles='solid')
c2 = ax.contour(x, y, lam_3d[0], colors="black", linestyles='dashed')
plt.clabel(c1, fmt="%1.1e")
plt.clabel(c2, fmt="%1.1e")
h1,_ = c1.legend_elements()
h2,_ = c2.legend_elements()
ax.legend([h1[0], h2[0]], ['Analytical', 'MF6-ADJ'])
plt.legend(loc='upper left')

contour_intervals = np.array([-70, -60, -50, -36, -24, -11])
plot_contour(x, y, lam_anal, lam_3d[0], contour_intervals)
plot_colorbar(x, y, lam_anal, lam_3d[0], contour_intervals)

print('lam = ', lam)

d_mat_k11, d_mat_k22, d_mat_k33, d_mat_k123 = d_amat_k()
print('dJdk = ', lam_dAdk_h(lam, d_mat_k123, hh))

# print('dJdk = ', lam_dAdk_h(lam, d_amat_k123, hh))
# print('dJdk = ', lam_dAdk_h(lam, d_amat_k123(d_amat_k11(),d_amat_k22(),d_amat_k33()), hh))
# # print('J = ', J_averaged_head(len(IA)-1, hh))
# # print('{:.30f}'.format(J_averaged_head(len(IA)-1, hh)))
print('{:.40f}'.format(J_averaged_head(len(IA)-1, hh)))

# # dJdk = (J_averaged_head(len(IA)-1, hh) - 1018318.0294735478237271308898925781250000000000) / epsilon
# dJdk = (J_averaged_head(len(IA)-1, hh) - 1188082.6381951763760298490524291992187500000000) / epsilon
# print(dJdk)

list_S_adj = lam_dAdk_h(lam, d_mat_k123, hh)
# array_S_adj = np.array(list_S_adj)
# S_adj = np.reshape(array_S_adj, (Nlay, Nrow, Ncol))
# vmin, vmax = array_S_adj.min(), array_S_adj.max()
# contour_intervals = np.arange(vmin, vmax, 0.01)
# contour_intervals = np.array([0, 5, 10, 15, 20, 25, 30, 35, 40])
# plot_colorbar_sensitivity(x, y, S_adj, S_adj, contour_intervals)

### Comparison Homogeneous
# list_S_adj = [0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 6.613879125,
# 13.08231044,
# 21.91935552,
# 30.18829759,
# 34.08169781,
# 30.18829589,
# 21.91935332,
# 13.0823086,
# 6.613878136,
# 0.0,
# 0.0,
# 13.08231044,
# 14.66725038,
# 19.33325618,
# 25.35101367,
# 29.61433067,
# 25.35101323,
# 19.33325494,
# 14.66724844,
# 13.08230828,
# 0.0,
# 0.0,
# 21.91935552,
# 19.33325618,
# 19.59242981,
# 22.40394877,
# 28.39123739,
# 22.40394934,
# 19.59243003,
# 19.33325464,
# 21.91935191,
# 0.0,
# 0.0,
# 30.18829759,
# 25.35101367,
# 22.40394877,
# 20.00084031,
# 27.39360415,
# 20.00084097,
# 22.40394967,
# 25.3510126,
# 30.18829283,
# 0.0,
# 0.0,
# 34.08169781,
# 29.61433067,
# 28.39123739,
# 27.39360415,
# 37.47063669,
# 27.39360488,
# 28.39123789,
# 29.61432941,
# 34.08169328,
# 0.0,
# 0.0,
# 30.18829589,
# 25.35101323,
# 22.40394934,
# 20.00084097,
# 27.39360488,
# 20.00084136,
# 22.40394895,
# 25.35101161,
# 30.18829227,
# 0.0,
# 0.0,
# 21.91935332,
# 19.33325494,
# 19.59243003,
# 22.40394967,
# 28.39123789,
# 22.40394895,
# 19.59242899,
# 19.33325355,
# 21.9193506,
# 0.0,
# 0.0,
# 13.0823086,
# 14.66724844,
# 19.33325464,
# 25.3510126,
# 29.61432941,
# 25.35101161,
# 19.33325355,
# 14.66724737,
# 13.08230698,
# 0.0,
# 0.0,
# 6.613878136,
# 13.08230828,
# 21.91935191,
# 30.18829283,
# 34.08169328,
# 30.18829227,
# 21.9193506,
# 13.08230698,
# 6.613877264,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0]
#
# list_S_per = [0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 6.6139502451,
# 13.08240462,
# 21.91939857,
# 30.18830903,
# 34.08165649,
# 30.18826246,
# 21.91942185,
# 13.08233477,
# 6.613880396,
# 0.0,
# 0.0,
# 13.08235805,
# 14.66714311,
# 19.33302265,
# 25.35074018,
# 29.61412538,
# 25.35099629,
# 19.33325548,
# 14.66735266,
# 13.08235805,
# 0.0,
# 0.0,
# 21.91937529,
# 19.33299936,
# 19.59200017,
# 22.40361646,
# 28.39115914,
# 22.40398899,
# 19.59244255,
# 19.33332533,
# 21.91935200,
# 0.0,
# 0.0,
# 30.18830903,
# 25.35074018,
# 22.40361646,
# 20.00089735,
# 27.39385236,
# 20.00078093,
# 22.40394242,
# 25.35108943,
# 30.18823918,
# 0.0,
# 0.0,
# 34.08167977,
# 29.61414866,
# 28.39115914,
# 27.39385236,
# 37.47066949,
# 27.39343327,
# 28.3913454,
# 29.61452119,
# 34.0816332,
# 0.0,
# 0.0,
# 30.18828575,
# 25.35094973,
# 22.40398899,
# 20.00080422,
# 27.39340998,
# 20.00099048,
# 22.40429167,
# 25.35125241,
# 30.18814605,
# 0.0,
# 0.0,
# 21.91942185,
# 19.33327876,
# 19.59241927,
# 22.40394242,
# 28.39136869,
# 22.40433823,
# 19.59283836,
# 19.33346502,
# 21.9192123,
# 0.0,
# 0.0,
# 13.08233477,
# 14.66732938,
# 19.33332533,
# 25.35106614,
# 29.61447462,
# 25.35125241,
# 19.33339518,
# 14.66732938,
# 13.08224164,
# 0.0,
# 0.0,
# 6.613880396,
# 13.08231149,
# 21.91932872,
# 30.18826246,
# 34.08160992,
# 30.18816933,
# 21.9192123,
# 13.08224164,
# 6.61383383,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0,
# 0.0]
#
# array_S_adj = np.array(list_S_adj)
# array_S_per = np.array(list_S_per)
# S_adj = np.reshape(array_S_adj, (Nlay, Nrow, Ncol))
# S_per = np.reshape(array_S_per, (Nlay, Nrow, Ncol))
#
# contour_intervals = np.array([0, 5, 10, 15, 20, 25, 30, 35, 40])
# plot_colorbar_sensitivity(x, y, S_adj, S_per, contour_intervals)


### Comparison Heterogeneous
# list_S_adj = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.15994428717618, 10.58911745983265, 21.59532658425982, 19.956677478801844, 27.04169718589776, 35.99189964527645, 18.892950406842033, 13.305403914857363, 6.372936826767006, 0.0, 0.0, 13.03959415527898, 12.377383553649894, 13.289133192777074, 24.562337135401343, 29.16694225962254, 29.3848555960382, 35.346346077635964, 17.625374404846795, 22.413016304097408, 0.0, 0.0, 17.49265106602301, 14.165480217576262, 26.676868133202987, 29.13954020404175, 47.27295131737222, 14.261709501680969, 15.993322168561715, 17.18116991042218, 34.837358175624615, 0.0, 0.0, 26.024858394132725, 28.160136241051905, 16.633627598443187, 30.811717488497358, 19.8163454170045, 22.161159014032243, 13.24123256370512, 25.309688216268434, 50.805776850497864, 0.0, 0.0, 29.30262788813312, 33.30096307599965, 31.233722309622138, 28.379557024139785, 22.709551860959323, 19.58648385938578, 19.98986924155374, 32.285436493414565, 54.90169981307841, 0.0, 0.0, 37.233074860734476, 17.464871818359352, 26.32158629401724, 15.615867594745291, 21.89821112993071, 13.781363536639176, 34.9972776792422, 27.91817890166213, 33.338891823593094, 0.0, 0.0, 13.17893739843682, 29.751221471625996, 23.731289689350824, 22.981727792066394, 39.25354844977971, 35.611110912102305, 20.978313314870487, 16.392309545851877, 20.06043363719949, 0.0, 0.0, 13.307089749872613, 18.341967981795438, 13.73496812880948, 33.611688982793005, 25.142985114420124, 36.73619119303654, 17.41507081935463, 19.207066011449434, 8.476278548302629, 0.0, 0.0, 3.5941621292111274, 17.32505876664897, 32.012973370349776, 22.37589012951046, 33.188881121808336, 19.828161341336052, 22.582560045033198, 10.445321700605291, 7.462821872145504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

list_S_per = [0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
8.1599E+00,
1.0589E+01,
2.1595E+01,
1.9957E+01,
2.7042E+01,
3.5992E+01,
1.8893E+01,
1.3305E+01,
6.3730E+00,
0.0000E+00,
0.0000E+00,
1.3040E+01,
1.2377E+01,
1.3289E+01,
2.4562E+01,
2.9167E+01,
2.9385E+01,
3.5346E+01,
1.7625E+01,
2.2413E+01,
0.0000E+00,
0.0000E+00,
1.7493E+01,
1.4166E+01,
2.6677E+01,
2.9140E+01,
4.7273E+01,
1.4262E+01,
1.5993E+01,
1.7181E+01,
3.4837E+01,
0.0000E+00,
0.0000E+00,
2.6025E+01,
2.8160E+01,
1.6634E+01,
3.0812E+01,
1.9816E+01,
2.2161E+01,
1.3241E+01,
2.5310E+01,
5.0806E+01,
0.0000E+00,
0.0000E+00,
2.9303E+01,
3.3301E+01,
3.1234E+01,
2.8380E+01,
2.2710E+01,
1.9587E+01,
1.9990E+01,
3.2285E+01,
5.4902E+01,
0.0000E+00,
0.0000E+00,
3.7233E+01,
1.7465E+01,
2.6322E+01,
1.5616E+01,
2.1898E+01,
1.3781E+01,
3.4997E+01,
2.7918E+01,
3.3339E+01,
0.0000E+00,
0.0000E+00,
1.3179E+01,
2.9751E+01,
2.3731E+01,
2.2982E+01,
3.9253E+01,
3.5611E+01,
2.0978E+01,
1.6392E+01,
2.0060E+01,
0.0000E+00,
0.0000E+00,
1.3307E+01,
1.8342E+01,
1.3735E+01,
3.3612E+01,
2.5143E+01,
3.6736E+01,
1.7415E+01,
1.9207E+01,
8.4763E+00,
0.0000E+00,
0.0000E+00,
3.5942E+00,
1.7325E+01,
3.2013E+01,
2.2376E+01,
3.3189E+01,
1.9828E+01,
2.2583E+01,
1.0445E+01,
7.4628E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00,
0.0000E+00]

array_S_adj = np.array(list_S_adj)
array_S_per = np.array(list_S_per)
S_adj = np.reshape(array_S_adj, (Nlay, Nrow, Ncol))
S_per = np.reshape(array_S_per, (Nlay, Nrow, Ncol))

# contour_intervals = np.array([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])
contour_intervals = np.array([0, 10, 20, 30, 40, 50])
plot_colorbar_sensitivity(x, y, S_adj, S_per, contour_intervals)

f = open("sensitivity.dat", "w")
print(f.write('  MF6-ADJ  Perturbation\n'))
print(f.write('-----------------------\n'))
for i in range(len(list_S_adj)):
    print(f.write('{:2.4E} '.format(list_S_adj[i])))
    print(f.write('{:2.4E}\n'.format(list_S_per[i])))
f.close()